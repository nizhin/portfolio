[ {
    "title": "Nap Finder",
    "links": [["NapFinder", "https://napfinder.onrender.com/"]],
    "image": "/napfinder.png",
    "date": "2025",
    "badges": [
      {"label": "Python", "variant": "backend"},
      {"label": "Flask", "variant": "backend"},
      {"label": "PostgresSQL", "variant": "backend"},
      {"label": "HTML/CSS", "variant": "frontend"}
      
    ],
    "description": [
      "Engineered a CRUD API for locations, reviews, and users, featuring data aggregation for average ratings.",
      "Implemented an interactive map view with dynamic pins that navigate users to pre-filtered detail pages for specific nap spot locations.",
      "Developed comprehensive spot detail pages displaying dynamic building information, user reviews, and specific access requirements."
    ]
  },
  {
    "title": "Pokémon Type Classifier",
    "links": [["Project Report", "/pokemon_report.pdf"]],
    "image": "/pokemon.png",
    "date": "2025",
    "languages": ["Python", "PyTorch"],
    "badges": [
      {"label": "Python", "variant": "ml"},
      {"label": "PyTorch", "variant": "ml"},
      {"label": "Machine Learning", "variant": "ml"},
      {"label": "Computer Vision", "variant": "ml"}
    ],
    "description": [
      "Developed image classification models to predict Pokémon types using convolutional neural networks (CNNs) and Vision Transformers (ViTs) on a custom labeled dataset of Pokémon images.",
      "Preprocessed and augmented over 1,000 images to improve model robustness and handle class imbalance.",
      "Evaluated model performance using precision, recall, F1-score, and confusion matrices; refined hyperparameters to boost accuracy."
    ]
  },
  {
    "title": "Visual Transit Simulator",
    "links": [],
    "image": "/VTS.png",
    "date": "2024",
    "languages": ["Java"],
    "badges": [
      {"label": "Java", "variant": "backend"},
      {"label": "Software Design", "variant": "backend"},
      {"label": "OOP", "variant": "backend"}
    ],
    "description": [
      "Contributed to the design, documentation, and implementation of a Visual Transit Simulator modeling vehicle and passenger behavior across routes.",
      "Created UML class diagrams and Javadoc documentation while adhering to Google Java style guidelines.",
      "Designed and executed unit tests to ensure robustness and compliance with project requirements."
    ]
  },
  {
    "title": "SQLite Clone",
    "links": [],
    "image": "/SQLite.png",
    "date": "2024",
    "languages": ["C"],
    "badges": [
      {"label": "C", "variant": "systems"},
      {"label": "Databases", "variant": "backend"},
      {"label": "Systems Programming", "variant": "systems"}
    ],
    "description": [
      "Developed a lightweight relational database inspired by SQLite, implementing core database functionalities in C.",
      "Utilized a B-tree index structure to optimize query performance and minimize full table scans.",
      "Engineered a custom storage format for data persistence, managing in-memory structures and disk I/O operations."
    ]
  },
  {
  "title": "Simple Retrieval-Augmented Generation (RAG) System",
  "links": [],
  "image": "/rag.jpg",
  "date": "2024",
  "languages": ["Python"],
  "badges": [
    {"label": "Python", "variant": "ml"},
    {"label": "PyTorch", "variant": "ml"},
    {"label": "Embeddings", "variant": "ml"}
    
  ],
  "description": [
    "Built a lightweight RAG pipeline integrating Ollama models for embedding and generation.",
    "Implemented text chunk embedding, vector database storage, and cosine similarity search for context retrieval.",
    "Combined retrieved context with a language model prompt to generate grounded responses."
  ]
  },
  {
  "title": "Multi-Threaded HTTP Server",
  "links": [],
  "image": "/server.svg",
  "date": "2024",
  "languages": ["C"],
  "badges": [
    {"label": "C", "variant": "systems"},
    {"label": "Multi-threading", "variant": "systems"},
    {"label": "Networking", "variant": "systems"},
    {"label": "Systems Programming", "variant": "systems"}
  ],
  "description": [
 "Built an multi-threaded HTTP web server in C that handles multiple clients using a thread pool.",
    "Implemented TCP socket setup, request parsing, and response generation for file retrieval.",
    "Created a thread-safe queue for managing client connections and ensured clean server shutdown."
  ]
},
{
  "title": "Simple Working Implementation Shell (Swish)",
  "links": [],
  "image": "/swish.png",
  "date": "2024",
  "languages": ["C"],
  "badges": [
     {"label": "C", "variant": "systems"},
    {"label": "Shell", "variant": "systems"},
    {"label": "Job Control", "variant": "systems"},
     {"label": "Systems Programming", "variant": "systems"}
  ],
  "description": [
    "Developed a simplified Unix shell supporting command execution, directory management, and I/O redirection.",
    "Implemented process creation, signal handling, and job control using system calls like fork(), exec(), waitpid(), and sigaction().",
    "Extended functionality to handle pipelines, enabling commands to communicate via pipes for parallel execution."
  ]
},
{
  "title": "Minitar",
  "links": [],
  "image": "/GNU.png",
  "date": "2024",
  "languages": ["C"],
  "badges": [
    {"label": "C", "variant": "systems"},
    {"label": "Archiving", "variant": "systems"},
    {"label": "Systems Programming", "variant": "systems"}
  ],
  "description": [
    "Created a simplified Posix-compliant version of the tar utility using C and the stdio library.",
    "Implemented archive creation, extraction, listing, and updating with proper 512-byte block formatting.",
    "Handled file I/O, header metadata generation, and error checking for reliable archive operations."
  ]
}
]
